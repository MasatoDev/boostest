item: ImportDeclaration(ImportDeclaration { span: Span { start: 0, end: 41 }, specifiers: Some(Vec([ImportSpecifier(ImportSpecifier { span: Span { start: 9, end: 13 }, imported: Identifier(IdentifierName { span: Span { start: 9, end: 13 }, name: "User" }), local: BindingIdentifier { span: Span { start: 9, end: 13 }, name: "User", symbol_id: Cell { value: None } }, import_kind: Value })])), source: StringLiteral { span: Span { start: 21, end: 40 }, value: "./anotherTypeFile" }, with_clause: None, import_kind: Value })
item: ImportDeclaration(ImportDeclaration { span: Span { start: 42, end: 87 }, specifiers: Some(Vec([ImportDefaultSpecifier(ImportDefaultSpecifier { span: Span { start: 54, end: 57 }, local: BindingIdentifier { span: Span { start: 54, end: 57 }, name: "JOB", symbol_id: Cell { value: None } } })])), source: StringLiteral { span: Span { start: 63, end: 86 }, value: "./anotherTypeFile2.ts" }, with_clause: None, import_kind: Type })
item: ImportDeclaration(ImportDeclaration { span: Span { start: 88, end: 125 }, specifiers: Some(Vec([ImportSpecifier(ImportSpecifier { span: Span { start: 97, end: 106 }, imported: Identifier(IdentifierName { span: Span { start: 97, end: 106 }, name: "LegendMan" }), local: BindingIdentifier { span: Span { start: 97, end: 106 }, name: "LegendMan", symbol_id: Cell { value: None } }, import_kind: Value })])), source: StringLiteral { span: Span { start: 114, end: 124 }, value: "./bet.ts" }, with_clause: None, import_kind: Value })
item: ImportDeclaration(ImportDeclaration { span: Span { start: 126, end: 187 }, specifiers: Some(Vec([ImportSpecifier(ImportSpecifier { span: Span { start: 135, end: 158 }, imported: Identifier(IdentifierName { span: Span { start: 135, end: 143 }, name: "Customer" }), local: BindingIdentifier { span: Span { start: 147, end: 158 }, name: "NamedWorker", symbol_id: Cell { value: None } }, import_kind: Value })])), source: StringLiteral { span: Span { start: 166, end: 186 }, value: "./anotherClassFile" }, with_clause: None, import_kind: Value })
item: VariableDeclaration(VariableDeclaration { span: Span { start: 189, end: 249 }, kind: Const, declarations: Vec([VariableDeclarator { span: Span { start: 195, end: 248 }, kind: Const, id: BindingPattern { kind: BindingIdentifier(BindingIdentifier { span: Span { start: 195, end: 207 }, name: "boostestMock", symbol_id: Cell { value: None } }), type_annotation: None, optional: false }, init: Some(ArrowFunctionExpression(ArrowFunctionExpression { span: Span { start: 210, end: 248 }, expression: false, async: false, params: FormalParameters { span: Span { start: 213, end: 224 }, kind: ArrowFormalParameters, items: Vec([FormalParameter { span: Span { start: 214, end: 223 }, pattern: BindingPattern { kind: BindingIdentifier(BindingIdentifier { span: Span { start: 214, end: 223 }, name: "arg", symbol_id: Cell { value: None } }), type_annotation: Some(TSTypeAnnotation { span: Span { start: 218, end: 223 }, type_annotation: TSAnyKeyword(TSAnyKeyword { span: Span { start: 220, end: 223 } }) }), optional: true }, accessibility: None, readonly: false, override: false, decorators: Vec([]) }]), rest: None }, body: FunctionBody { span: Span { start: 231, end: 248 }, directives: Vec([]), statements: Vec([ReturnStatement(ReturnStatement { span: Span { start: 235, end: 246 }, argument: Some(Identifier(IdentifierReference { span: Span { start: 242, end: 245 }, name: "arg", reference_id: Cell { value: None }, reference_flag: ReferenceFlag(0x0) })) })]) }, type_parameters: Some(TSTypeParameterDeclaration { span: Span { start: 210, end: 213 }, params: Vec([TSTypeParameter { span: Span { start: 211, end: 212 }, name: BindingIdentifier { span: Span { start: 211, end: 212 }, name: "T", symbol_id: Cell { value: None } }, constraint: None, default: None, in: false, out: false, const: false, scope_id: Cell { value: None } }]) }), return_type: Some(TSTypeAnnotation { span: Span { start: 224, end: 227 }, type_annotation: TSTypeReference(TSTypeReference { span: Span { start: 226, end: 227 }, type_name: IdentifierReference(IdentifierReference { span: Span { start: 226, end: 227 }, name: "T", reference_id: Cell { value: None }, reference_flag: ReferenceFlag(0x0) }), type_parameters: None }) }), scope_id: Cell { value: None } })), definite: false }]), modifiers: Modifiers(None) })
result: false
item: ImportDeclaration(ImportDeclaration { span: Span { start: 0, end: 41 }, specifiers: Some(Vec([ImportSpecifier(ImportSpecifier { span: Span { start: 9, end: 13 }, imported: Identifier(IdentifierName { span: Span { start: 9, end: 13 }, name: "User" }), local: BindingIdentifier { span: Span { start: 9, end: 13 }, name: "User", symbol_id: Cell { value: None } }, import_kind: Value })])), source: StringLiteral { span: Span { start: 21, end: 40 }, value: "./anotherTypeFile" }, with_clause: None, import_kind: Value })
item: ImportDeclaration(ImportDeclaration { span: Span { start: 42, end: 87 }, specifiers: Some(Vec([ImportDefaultSpecifier(ImportDefaultSpecifier { span: Span { start: 54, end: 57 }, local: BindingIdentifier { span: Span { start: 54, end: 57 }, name: "JOB", symbol_id: Cell { value: None } } })])), source: StringLiteral { span: Span { start: 63, end: 86 }, value: "./anotherTypeFile2.ts" }, with_clause: None, import_kind: Type })
item: ImportDeclaration(ImportDeclaration { span: Span { start: 88, end: 125 }, specifiers: Some(Vec([ImportSpecifier(ImportSpecifier { span: Span { start: 97, end: 106 }, imported: Identifier(IdentifierName { span: Span { start: 97, end: 106 }, name: "LegendMan" }), local: BindingIdentifier { span: Span { start: 97, end: 106 }, name: "LegendMan", symbol_id: Cell { value: None } }, import_kind: Value })])), source: StringLiteral { span: Span { start: 114, end: 124 }, value: "./bet.ts" }, with_clause: None, import_kind: Value })
item: ImportDeclaration(ImportDeclaration { span: Span { start: 126, end: 187 }, specifiers: Some(Vec([ImportSpecifier(ImportSpecifier { span: Span { start: 135, end: 158 }, imported: Identifier(IdentifierName { span: Span { start: 135, end: 143 }, name: "Customer" }), local: BindingIdentifier { span: Span { start: 147, end: 158 }, name: "NamedWorker", symbol_id: Cell { value: None } }, import_kind: Value })])), source: StringLiteral { span: Span { start: 166, end: 186 }, value: "./anotherClassFile" }, with_clause: None, import_kind: Value })
item: VariableDeclaration(VariableDeclaration { span: Span { start: 189, end: 249 }, kind: Const, declarations: Vec([VariableDeclarator { span: Span { start: 195, end: 248 }, kind: Const, id: BindingPattern { kind: BindingIdentifier(BindingIdentifier { span: Span { start: 195, end: 207 }, name: "boostestMock", symbol_id: Cell { value: None } }), type_annotation: None, optional: false }, init: Some(ArrowFunctionExpression(ArrowFunctionExpression { span: Span { start: 210, end: 248 }, expression: false, async: false, params: FormalParameters { span: Span { start: 213, end: 224 }, kind: ArrowFormalParameters, items: Vec([FormalParameter { span: Span { start: 214, end: 223 }, pattern: BindingPattern { kind: BindingIdentifier(BindingIdentifier { span: Span { start: 214, end: 223 }, name: "arg", symbol_id: Cell { value: None } }), type_annotation: Some(TSTypeAnnotation { span: Span { start: 218, end: 223 }, type_annotation: TSAnyKeyword(TSAnyKeyword { span: Span { start: 220, end: 223 } }) }), optional: true }, accessibility: None, readonly: false, override: false, decorators: Vec([]) }]), rest: None }, body: FunctionBody { span: Span { start: 231, end: 248 }, directives: Vec([]), statements: Vec([ReturnStatement(ReturnStatement { span: Span { start: 235, end: 246 }, argument: Some(Identifier(IdentifierReference { span: Span { start: 242, end: 245 }, name: "arg", reference_id: Cell { value: None }, reference_flag: ReferenceFlag(0x0) })) })]) }, type_parameters: Some(TSTypeParameterDeclaration { span: Span { start: 210, end: 213 }, params: Vec([TSTypeParameter { span: Span { start: 211, end: 212 }, name: BindingIdentifier { span: Span { start: 211, end: 212 }, name: "T", symbol_id: Cell { value: None } }, constraint: None, default: None, in: false, out: false, const: false, scope_id: Cell { value: None } }]) }), return_type: Some(TSTypeAnnotation { span: Span { start: 224, end: 227 }, type_annotation: TSTypeReference(TSTypeReference { span: Span { start: 226, end: 227 }, type_name: IdentifierReference(IdentifierReference { span: Span { start: 226, end: 227 }, name: "T", reference_id: Cell { value: None }, reference_flag: ReferenceFlag(0x0) }), type_parameters: None }) }), scope_id: Cell { value: None } })), definite: false }]), modifiers: Modifiers(None) })
result: false
item: ImportDeclaration(ImportDeclaration { span: Span { start: 0, end: 41 }, specifiers: Some(Vec([ImportSpecifier(ImportSpecifier { span: Span { start: 9, end: 13 }, imported: Identifier(IdentifierName { span: Span { start: 9, end: 13 }, name: "User" }), local: BindingIdentifier { span: Span { start: 9, end: 13 }, name: "User", symbol_id: Cell { value: None } }, import_kind: Value })])), source: StringLiteral { span: Span { start: 21, end: 40 }, value: "./anotherTypeFile" }, with_clause: None, import_kind: Value })
item: ImportDeclaration(ImportDeclaration { span: Span { start: 42, end: 87 }, specifiers: Some(Vec([ImportDefaultSpecifier(ImportDefaultSpecifier { span: Span { start: 54, end: 57 }, local: BindingIdentifier { span: Span { start: 54, end: 57 }, name: "JOB", symbol_id: Cell { value: None } } })])), source: StringLiteral { span: Span { start: 63, end: 86 }, value: "./anotherTypeFile2.ts" }, with_clause: None, import_kind: Type })
item: ImportDeclaration(ImportDeclaration { span: Span { start: 88, end: 125 }, specifiers: Some(Vec([ImportSpecifier(ImportSpecifier { span: Span { start: 97, end: 106 }, imported: Identifier(IdentifierName { span: Span { start: 97, end: 106 }, name: "LegendMan" }), local: BindingIdentifier { span: Span { start: 97, end: 106 }, name: "LegendMan", symbol_id: Cell { value: None } }, import_kind: Value })])), source: StringLiteral { span: Span { start: 114, end: 124 }, value: "./bet.ts" }, with_clause: None, import_kind: Value })
item: ImportDeclaration(ImportDeclaration { span: Span { start: 126, end: 187 }, specifiers: Some(Vec([ImportSpecifier(ImportSpecifier { span: Span { start: 135, end: 158 }, imported: Identifier(IdentifierName { span: Span { start: 135, end: 143 }, name: "Customer" }), local: BindingIdentifier { span: Span { start: 147, end: 158 }, name: "NamedWorker", symbol_id: Cell { value: None } }, import_kind: Value })])), source: StringLiteral { span: Span { start: 166, end: 186 }, value: "./anotherClassFile" }, with_clause: None, import_kind: Value })
item: VariableDeclaration(VariableDeclaration { span: Span { start: 189, end: 249 }, kind: Const, declarations: Vec([VariableDeclarator { span: Span { start: 195, end: 248 }, kind: Const, id: BindingPattern { kind: BindingIdentifier(BindingIdentifier { span: Span { start: 195, end: 207 }, name: "boostestMock", symbol_id: Cell { value: None } }), type_annotation: None, optional: false }, init: Some(ArrowFunctionExpression(ArrowFunctionExpression { span: Span { start: 210, end: 248 }, expression: false, async: false, params: FormalParameters { span: Span { start: 213, end: 224 }, kind: ArrowFormalParameters, items: Vec([FormalParameter { span: Span { start: 214, end: 223 }, pattern: BindingPattern { kind: BindingIdentifier(BindingIdentifier { span: Span { start: 214, end: 223 }, name: "arg", symbol_id: Cell { value: None } }), type_annotation: Some(TSTypeAnnotation { span: Span { start: 218, end: 223 }, type_annotation: TSAnyKeyword(TSAnyKeyword { span: Span { start: 220, end: 223 } }) }), optional: true }, accessibility: None, readonly: false, override: false, decorators: Vec([]) }]), rest: None }, body: FunctionBody { span: Span { start: 231, end: 248 }, directives: Vec([]), statements: Vec([ReturnStatement(ReturnStatement { span: Span { start: 235, end: 246 }, argument: Some(Identifier(IdentifierReference { span: Span { start: 242, end: 245 }, name: "arg", reference_id: Cell { value: None }, reference_flag: ReferenceFlag(0x0) })) })]) }, type_parameters: Some(TSTypeParameterDeclaration { span: Span { start: 210, end: 213 }, params: Vec([TSTypeParameter { span: Span { start: 211, end: 212 }, name: BindingIdentifier { span: Span { start: 211, end: 212 }, name: "T", symbol_id: Cell { value: None } }, constraint: None, default: None, in: false, out: false, const: false, scope_id: Cell { value: None } }]) }), return_type: Some(TSTypeAnnotation { span: Span { start: 224, end: 227 }, type_annotation: TSTypeReference(TSTypeReference { span: Span { start: 226, end: 227 }, type_name: IdentifierReference(IdentifierReference { span: Span { start: 226, end: 227 }, name: "T", reference_id: Cell { value: None }, reference_flag: ReferenceFlag(0x0) }), type_parameters: None }) }), scope_id: Cell { value: None } })), definite: false }]), modifiers: Modifiers(None) })
result: false
item: ImportDeclaration(ImportDeclaration { span: Span { start: 0, end: 41 }, specifiers: Some(Vec([ImportSpecifier(ImportSpecifier { span: Span { start: 9, end: 13 }, imported: Identifier(IdentifierName { span: Span { start: 9, end: 13 }, name: "User" }), local: BindingIdentifier { span: Span { start: 9, end: 13 }, name: "User", symbol_id: Cell { value: None } }, import_kind: Value })])), source: StringLiteral { span: Span { start: 21, end: 40 }, value: "./anotherTypeFile" }, with_clause: None, import_kind: Value })
item: ImportDeclaration(ImportDeclaration { span: Span { start: 42, end: 87 }, specifiers: Some(Vec([ImportDefaultSpecifier(ImportDefaultSpecifier { span: Span { start: 54, end: 57 }, local: BindingIdentifier { span: Span { start: 54, end: 57 }, name: "JOB", symbol_id: Cell { value: None } } })])), source: StringLiteral { span: Span { start: 63, end: 86 }, value: "./anotherTypeFile2.ts" }, with_clause: None, import_kind: Type })
item: ImportDeclaration(ImportDeclaration { span: Span { start: 88, end: 125 }, specifiers: Some(Vec([ImportSpecifier(ImportSpecifier { span: Span { start: 97, end: 106 }, imported: Identifier(IdentifierName { span: Span { start: 97, end: 106 }, name: "LegendMan" }), local: BindingIdentifier { span: Span { start: 97, end: 106 }, name: "LegendMan", symbol_id: Cell { value: None } }, import_kind: Value })])), source: StringLiteral { span: Span { start: 114, end: 124 }, value: "./bet.ts" }, with_clause: None, import_kind: Value })
item: ImportDeclaration(ImportDeclaration { span: Span { start: 126, end: 187 }, specifiers: Some(Vec([ImportSpecifier(ImportSpecifier { span: Span { start: 135, end: 158 }, imported: Identifier(IdentifierName { span: Span { start: 135, end: 143 }, name: "Customer" }), local: BindingIdentifier { span: Span { start: 147, end: 158 }, name: "NamedWorker", symbol_id: Cell { value: None } }, import_kind: Value })])), source: StringLiteral { span: Span { start: 166, end: 186 }, value: "./anotherClassFile" }, with_clause: None, import_kind: Value })
item: VariableDeclaration(VariableDeclaration { span: Span { start: 189, end: 249 }, kind: Const, declarations: Vec([VariableDeclarator { span: Span { start: 195, end: 248 }, kind: Const, id: BindingPattern { kind: BindingIdentifier(BindingIdentifier { span: Span { start: 195, end: 207 }, name: "boostestMock", symbol_id: Cell { value: None } }), type_annotation: None, optional: false }, init: Some(ArrowFunctionExpression(ArrowFunctionExpression { span: Span { start: 210, end: 248 }, expression: false, async: false, params: FormalParameters { span: Span { start: 213, end: 224 }, kind: ArrowFormalParameters, items: Vec([FormalParameter { span: Span { start: 214, end: 223 }, pattern: BindingPattern { kind: BindingIdentifier(BindingIdentifier { span: Span { start: 214, end: 223 }, name: "arg", symbol_id: Cell { value: None } }), type_annotation: Some(TSTypeAnnotation { span: Span { start: 218, end: 223 }, type_annotation: TSAnyKeyword(TSAnyKeyword { span: Span { start: 220, end: 223 } }) }), optional: true }, accessibility: None, readonly: false, override: false, decorators: Vec([]) }]), rest: None }, body: FunctionBody { span: Span { start: 231, end: 248 }, directives: Vec([]), statements: Vec([ReturnStatement(ReturnStatement { span: Span { start: 235, end: 246 }, argument: Some(Identifier(IdentifierReference { span: Span { start: 242, end: 245 }, name: "arg", reference_id: Cell { value: None }, reference_flag: ReferenceFlag(0x0) })) })]) }, type_parameters: Some(TSTypeParameterDeclaration { span: Span { start: 210, end: 213 }, params: Vec([TSTypeParameter { span: Span { start: 211, end: 212 }, name: BindingIdentifier { span: Span { start: 211, end: 212 }, name: "T", symbol_id: Cell { value: None } }, constraint: None, default: None, in: false, out: false, const: false, scope_id: Cell { value: None } }]) }), return_type: Some(TSTypeAnnotation { span: Span { start: 224, end: 227 }, type_annotation: TSTypeReference(TSTypeReference { span: Span { start: 226, end: 227 }, type_name: IdentifierReference(IdentifierReference { span: Span { start: 226, end: 227 }, name: "T", reference_id: Cell { value: None }, reference_flag: ReferenceFlag(0x0) }), type_parameters: None }) }), scope_id: Cell { value: None } })), definite: false }]), modifiers: Modifiers(None) })
result: false
item: ImportDeclaration(ImportDeclaration { span: Span { start: 0, end: 41 }, specifiers: Some(Vec([ImportSpecifier(ImportSpecifier { span: Span { start: 9, end: 13 }, imported: Identifier(IdentifierName { span: Span { start: 9, end: 13 }, name: "User" }), local: BindingIdentifier { span: Span { start: 9, end: 13 }, name: "User", symbol_id: Cell { value: None } }, import_kind: Value })])), source: StringLiteral { span: Span { start: 21, end: 40 }, value: "./anotherTypeFile" }, with_clause: None, import_kind: Value })
item: ImportDeclaration(ImportDeclaration { span: Span { start: 42, end: 87 }, specifiers: Some(Vec([ImportDefaultSpecifier(ImportDefaultSpecifier { span: Span { start: 54, end: 57 }, local: BindingIdentifier { span: Span { start: 54, end: 57 }, name: "JOB", symbol_id: Cell { value: None } } })])), source: StringLiteral { span: Span { start: 63, end: 86 }, value: "./anotherTypeFile2.ts" }, with_clause: None, import_kind: Type })
item: ImportDeclaration(ImportDeclaration { span: Span { start: 88, end: 125 }, specifiers: Some(Vec([ImportSpecifier(ImportSpecifier { span: Span { start: 97, end: 106 }, imported: Identifier(IdentifierName { span: Span { start: 97, end: 106 }, name: "LegendMan" }), local: BindingIdentifier { span: Span { start: 97, end: 106 }, name: "LegendMan", symbol_id: Cell { value: None } }, import_kind: Value })])), source: StringLiteral { span: Span { start: 114, end: 124 }, value: "./bet.ts" }, with_clause: None, import_kind: Value })
item: ImportDeclaration(ImportDeclaration { span: Span { start: 126, end: 187 }, specifiers: Some(Vec([ImportSpecifier(ImportSpecifier { span: Span { start: 135, end: 158 }, imported: Identifier(IdentifierName { span: Span { start: 135, end: 143 }, name: "Customer" }), local: BindingIdentifier { span: Span { start: 147, end: 158 }, name: "NamedWorker", symbol_id: Cell { value: None } }, import_kind: Value })])), source: StringLiteral { span: Span { start: 166, end: 186 }, value: "./anotherClassFile" }, with_clause: None, import_kind: Value })
item: VariableDeclaration(VariableDeclaration { span: Span { start: 189, end: 249 }, kind: Const, declarations: Vec([VariableDeclarator { span: Span { start: 195, end: 248 }, kind: Const, id: BindingPattern { kind: BindingIdentifier(BindingIdentifier { span: Span { start: 195, end: 207 }, name: "boostestMock", symbol_id: Cell { value: None } }), type_annotation: None, optional: false }, init: Some(ArrowFunctionExpression(ArrowFunctionExpression { span: Span { start: 210, end: 248 }, expression: false, async: false, params: FormalParameters { span: Span { start: 213, end: 224 }, kind: ArrowFormalParameters, items: Vec([FormalParameter { span: Span { start: 214, end: 223 }, pattern: BindingPattern { kind: BindingIdentifier(BindingIdentifier { span: Span { start: 214, end: 223 }, name: "arg", symbol_id: Cell { value: None } }), type_annotation: Some(TSTypeAnnotation { span: Span { start: 218, end: 223 }, type_annotation: TSAnyKeyword(TSAnyKeyword { span: Span { start: 220, end: 223 } }) }), optional: true }, accessibility: None, readonly: false, override: false, decorators: Vec([]) }]), rest: None }, body: FunctionBody { span: Span { start: 231, end: 248 }, directives: Vec([]), statements: Vec([ReturnStatement(ReturnStatement { span: Span { start: 235, end: 246 }, argument: Some(Identifier(IdentifierReference { span: Span { start: 242, end: 245 }, name: "arg", reference_id: Cell { value: None }, reference_flag: ReferenceFlag(0x0) })) })]) }, type_parameters: Some(TSTypeParameterDeclaration { span: Span { start: 210, end: 213 }, params: Vec([TSTypeParameter { span: Span { start: 211, end: 212 }, name: BindingIdentifier { span: Span { start: 211, end: 212 }, name: "T", symbol_id: Cell { value: None } }, constraint: None, default: None, in: false, out: false, const: false, scope_id: Cell { value: None } }]) }), return_type: Some(TSTypeAnnotation { span: Span { start: 224, end: 227 }, type_annotation: TSTypeReference(TSTypeReference { span: Span { start: 226, end: 227 }, type_name: IdentifierReference(IdentifierReference { span: Span { start: 226, end: 227 }, name: "T", reference_id: Cell { value: None }, reference_flag: ReferenceFlag(0x0) }), type_parameters: None }) }), scope_id: Cell { value: None } })), definite: false }]), modifiers: Modifiers(None) })
result: false
item: ImportDeclaration(ImportDeclaration { span: Span { start: 0, end: 41 }, specifiers: Some(Vec([ImportSpecifier(ImportSpecifier { span: Span { start: 9, end: 13 }, imported: Identifier(IdentifierName { span: Span { start: 9, end: 13 }, name: "User" }), local: BindingIdentifier { span: Span { start: 9, end: 13 }, name: "User", symbol_id: Cell { value: None } }, import_kind: Value })])), source: StringLiteral { span: Span { start: 21, end: 40 }, value: "./anotherTypeFile" }, with_clause: None, import_kind: Value })
item: ImportDeclaration(ImportDeclaration { span: Span { start: 42, end: 87 }, specifiers: Some(Vec([ImportDefaultSpecifier(ImportDefaultSpecifier { span: Span { start: 54, end: 57 }, local: BindingIdentifier { span: Span { start: 54, end: 57 }, name: "JOB", symbol_id: Cell { value: None } } })])), source: StringLiteral { span: Span { start: 63, end: 86 }, value: "./anotherTypeFile2.ts" }, with_clause: None, import_kind: Type })
item: ImportDeclaration(ImportDeclaration { span: Span { start: 88, end: 125 }, specifiers: Some(Vec([ImportSpecifier(ImportSpecifier { span: Span { start: 97, end: 106 }, imported: Identifier(IdentifierName { span: Span { start: 97, end: 106 }, name: "LegendMan" }), local: BindingIdentifier { span: Span { start: 97, end: 106 }, name: "LegendMan", symbol_id: Cell { value: None } }, import_kind: Value })])), source: StringLiteral { span: Span { start: 114, end: 124 }, value: "./bet.ts" }, with_clause: None, import_kind: Value })
item: ImportDeclaration(ImportDeclaration { span: Span { start: 126, end: 187 }, specifiers: Some(Vec([ImportSpecifier(ImportSpecifier { span: Span { start: 135, end: 158 }, imported: Identifier(IdentifierName { span: Span { start: 135, end: 143 }, name: "Customer" }), local: BindingIdentifier { span: Span { start: 147, end: 158 }, name: "NamedWorker", symbol_id: Cell { value: None } }, import_kind: Value })])), source: StringLiteral { span: Span { start: 166, end: 186 }, value: "./anotherClassFile" }, with_clause: None, import_kind: Value })
item: VariableDeclaration(VariableDeclaration { span: Span { start: 189, end: 249 }, kind: Const, declarations: Vec([VariableDeclarator { span: Span { start: 195, end: 248 }, kind: Const, id: BindingPattern { kind: BindingIdentifier(BindingIdentifier { span: Span { start: 195, end: 207 }, name: "boostestMock", symbol_id: Cell { value: None } }), type_annotation: None, optional: false }, init: Some(ArrowFunctionExpression(ArrowFunctionExpression { span: Span { start: 210, end: 248 }, expression: false, async: false, params: FormalParameters { span: Span { start: 213, end: 224 }, kind: ArrowFormalParameters, items: Vec([FormalParameter { span: Span { start: 214, end: 223 }, pattern: BindingPattern { kind: BindingIdentifier(BindingIdentifier { span: Span { start: 214, end: 223 }, name: "arg", symbol_id: Cell { value: None } }), type_annotation: Some(TSTypeAnnotation { span: Span { start: 218, end: 223 }, type_annotation: TSAnyKeyword(TSAnyKeyword { span: Span { start: 220, end: 223 } }) }), optional: true }, accessibility: None, readonly: false, override: false, decorators: Vec([]) }]), rest: None }, body: FunctionBody { span: Span { start: 231, end: 248 }, directives: Vec([]), statements: Vec([ReturnStatement(ReturnStatement { span: Span { start: 235, end: 246 }, argument: Some(Identifier(IdentifierReference { span: Span { start: 242, end: 245 }, name: "arg", reference_id: Cell { value: None }, reference_flag: ReferenceFlag(0x0) })) })]) }, type_parameters: Some(TSTypeParameterDeclaration { span: Span { start: 210, end: 213 }, params: Vec([TSTypeParameter { span: Span { start: 211, end: 212 }, name: BindingIdentifier { span: Span { start: 211, end: 212 }, name: "T", symbol_id: Cell { value: None } }, constraint: None, default: None, in: false, out: false, const: false, scope_id: Cell { value: None } }]) }), return_type: Some(TSTypeAnnotation { span: Span { start: 224, end: 227 }, type_annotation: TSTypeReference(TSTypeReference { span: Span { start: 226, end: 227 }, type_name: IdentifierReference(IdentifierReference { span: Span { start: 226, end: 227 }, name: "T", reference_id: Cell { value: None }, reference_flag: ReferenceFlag(0x0) }), type_parameters: None }) }), scope_id: Cell { value: None } })), definite: false }]), modifiers: Modifiers(None) })
result: false
local_vec[]