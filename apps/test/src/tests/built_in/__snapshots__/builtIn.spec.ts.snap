// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`BuiltIn Tests class BuiltIn matches snapshot 1`] = `"{"date":{"toLocaleString":"(locales, options) => {\\n            return \\"test string data\\";\\n        }","toLocaleDateString":"(locales, options) => {\\n            return \\"test string data\\";\\n        }","toLocaleTimeString":"(locales, options) => {\\n            return \\"test string data\\";\\n        }"},"set":{"add":"(value) => {\\n            return {};\\n        }","clear":"() => { }","delete":"(value) => {\\n            return false;\\n        }","forEach":"(callbackfn, thisArg) => { }","has":"(value) => {\\n            return false;\\n        }","size":10,"entries":"() => {\\n            return {};\\n        }","keys":"() => {\\n            return {};\\n        }","values":"() => {\\n            return {};\\n        }"},"map":{"clear":"() => { }","delete":"(key) => {\\n            return false;\\n        }","forEach":"(callbackfn, thisArg) => { }","get":"(key) => {\\n            return 10;\\n        }","has":"(key) => {\\n            return false;\\n        }","set":"(key, value) => {\\n            return {};\\n        }","size":10,"entries":"() => {\\n            return {};\\n        }","keys":"() => {\\n            return {};\\n        }","values":"() => {\\n            return {};\\n        }"},"array":[],"object":{"constructor":"() => { }","toString":"() => {\\n            return \\"test string data\\";\\n        }","toLocaleString":"() => {\\n            return \\"test string data\\";\\n        }","valueOf":"() => {\\n            return {};\\n        }","hasOwnProperty":"(v) => {\\n            return false;\\n        }","isPrototypeOf":"(v) => {\\n            return false;\\n        }","propertyIsEnumerable":"(v) => {\\n            return false;\\n        }"},"string":{"localeCompare":"(that, locales, options) => {\\n            return 10;\\n        }"},"number":{"toLocaleString":"(locales, options) => {\\n            return \\"test string data\\";\\n        }"},"boolean":{"valueOf":"() => {\\n            return false;\\n        }"},"symbol":{"toString":"() => {\\n            return \\"test string data\\";\\n        }","valueOf":"() => {\\n            return Symbol();\\n        }"},"function_class":"() => { }","regexp":{"exec":"(string) => {\\n            return {\\n                index: 10,\\n                input: \\"test string data\\",\\n                0: \\"test string data\\"\\n            };\\n        }","test":"(string) => {\\n            return false;\\n        }","source":"test string data","global":false,"ignoreCase":false,"multiline":false,"lastIndex":10,"compile":"(pattern, flags) => {\\n            return {};\\n        }"},"error":{"name":"test string data","message":"test string data","stack":"test string data"},"promise":"test string data","arrayBuffer":{"byteLength":10,"slice":"(begin, end) => {\\n            return {};\\n        }"},"dataView":{"buffer":{"byteLength":10,"slice":"(begin, end) => {\\n                return {};\\n            }"},"byteLength":10,"byteOffset":10,"getFloat32":"(byteOffset, littleEndian) => {\\n            return 10;\\n        }","getFloat64":"(byteOffset, littleEndian) => {\\n            return 10;\\n        }","getInt8":"(byteOffset) => {\\n            return 10;\\n        }","getInt16":"(byteOffset, littleEndian) => {\\n            return 10;\\n        }","getInt32":"(byteOffset, littleEndian) => {\\n            return 10;\\n        }","getUint8":"(byteOffset) => {\\n            return 10;\\n        }","getUint16":"(byteOffset, littleEndian) => {\\n            return 10;\\n        }","getUint32":"(byteOffset, littleEndian) => {\\n            return 10;\\n        }","setFloat32":"(byteOffset, value, littleEndian) => { }","setFloat64":"(byteOffset, value, littleEndian) => { }","setInt8":"(byteOffset, value) => { }","setInt16":"(byteOffset, value, littleEndian) => { }","setInt32":"(byteOffset, value, littleEndian) => { }","setUint8":"(byteOffset, value) => { }","setUint16":"(byteOffset, value, littleEndian) => { }","setUint32":"(byteOffset, value, littleEndian) => { }"},"int8Array":{"0":10,"BYTES_PER_ELEMENT":10,"buffer":{"byteLength":10,"slice":"(begin, end) => {\\n                return {};\\n            }"},"byteLength":10,"byteOffset":10,"copyWithin":"(target, start, end) => {\\n            return {};\\n        }","every":"(predicate, thisArg) => {\\n            return false;\\n        }","fill":"(value, start, end) => {\\n            return {};\\n        }","filter":"(predicate, thisArg) => {\\n            return {};\\n        }","find":"(predicate, thisArg) => {\\n            return 10;\\n        }","findIndex":"(predicate, thisArg) => {\\n            return 10;\\n        }","forEach":"(callbackfn, thisArg) => { }","indexOf":"(searchElement, fromIndex) => {\\n            return 10;\\n        }","join":"(separator) => {\\n            return \\"test string data\\";\\n        }","lastIndexOf":"(searchElement, fromIndex) => {\\n            return 10;\\n        }","length":10,"map":"(callbackfn, thisArg) => {\\n            return {};\\n        }","reduce":"(callbackfn) => {\\n            return 10;\\n        }","reduceRight":"(callbackfn) => {\\n            return 10;\\n        }","reverse":"() => {\\n            return {};\\n        }","set":"(array, offset) => { }","slice":"(start, end) => {\\n            return {};\\n        }","some":"(predicate, thisArg) => {\\n            return false;\\n        }","sort":"(compareFn) => {\\n            return {};\\n        }","subarray":"(begin, end) => {\\n            return {};\\n        }","toLocaleString":"() => {\\n            return \\"test string data\\";\\n        }","toString":"() => {\\n            return \\"test string data\\";\\n        }","valueOf":"() => {\\n            return {};\\n        }"},"uint8Array":{"0":10,"BYTES_PER_ELEMENT":10,"buffer":{"byteLength":10,"slice":"(begin, end) => {\\n                return {};\\n            }"},"byteLength":10,"byteOffset":10,"copyWithin":"(target, start, end) => {\\n            return {};\\n        }","every":"(predicate, thisArg) => {\\n            return false;\\n        }","fill":"(value, start, end) => {\\n            return {};\\n        }","filter":"(predicate, thisArg) => {\\n            return {};\\n        }","find":"(predicate, thisArg) => {\\n            return 10;\\n        }","findIndex":"(predicate, thisArg) => {\\n            return 10;\\n        }","forEach":"(callbackfn, thisArg) => { }","indexOf":"(searchElement, fromIndex) => {\\n            return 10;\\n        }","join":"(separator) => {\\n            return \\"test string data\\";\\n        }","lastIndexOf":"(searchElement, fromIndex) => {\\n            return 10;\\n        }","length":10,"map":"(callbackfn, thisArg) => {\\n            return {};\\n        }","reduce":"(callbackfn) => {\\n            return 10;\\n        }","reduceRight":"(callbackfn) => {\\n            return 10;\\n        }","reverse":"() => {\\n            return {};\\n        }","set":"(array, offset) => { }","slice":"(start, end) => {\\n            return {};\\n        }","some":"(predicate, thisArg) => {\\n            return false;\\n        }","sort":"(compareFn) => {\\n            return {};\\n        }","subarray":"(begin, end) => {\\n            return {};\\n        }","toLocaleString":"() => {\\n            return \\"test string data\\";\\n        }","toString":"() => {\\n            return \\"test string data\\";\\n        }","valueOf":"() => {\\n            return {};\\n        }"},"uint8ClampedArray":{"0":10,"BYTES_PER_ELEMENT":10,"buffer":{"byteLength":10,"slice":"(begin, end) => {\\n                return {};\\n            }"},"byteLength":10,"byteOffset":10,"copyWithin":"(target, start, end) => {\\n            return {};\\n        }","every":"(predicate, thisArg) => {\\n            return false;\\n        }","fill":"(value, start, end) => {\\n            return {};\\n        }","filter":"(predicate, thisArg) => {\\n            return {};\\n        }","find":"(predicate, thisArg) => {\\n            return 10;\\n        }","findIndex":"(predicate, thisArg) => {\\n            return 10;\\n        }","forEach":"(callbackfn, thisArg) => { }","indexOf":"(searchElement, fromIndex) => {\\n            return 10;\\n        }","join":"(separator) => {\\n            return \\"test string data\\";\\n        }","lastIndexOf":"(searchElement, fromIndex) => {\\n            return 10;\\n        }","length":10,"map":"(callbackfn, thisArg) => {\\n            return {};\\n        }","reduce":"(callbackfn) => {\\n            return 10;\\n        }","reduceRight":"(callbackfn) => {\\n            return 10;\\n        }","reverse":"() => {\\n            return {};\\n        }","set":"(array, offset) => { }","slice":"(start, end) => {\\n            return {};\\n        }","some":"(predicate, thisArg) => {\\n            return false;\\n        }","sort":"(compareFn) => {\\n            return {};\\n        }","subarray":"(begin, end) => {\\n            return {};\\n        }","toLocaleString":"() => {\\n            return \\"test string data\\";\\n        }","toString":"() => {\\n            return \\"test string data\\";\\n        }","valueOf":"() => {\\n            return {};\\n        }"},"mapIterator":{},"setIterator":{},"arrayIterator":{},"stringIterator":{},"sharedArrayBuffer":{"byteLength":10,"slice":"(begin, end) => {\\n            return {};\\n        }"},"atomics":{"waitAsync":"(typedArray, index, value, timeout) => {\\n            return {\\n                async: false,\\n                value: \\"not-equal\\"\\n            };\\n        }","add":"(typedArray, index, value) => {\\n            return 10;\\n        }","and":"(typedArray, index, value) => {\\n            return 10;\\n        }","compareExchange":"(typedArray, index, expectedValue, replacementValue) => {\\n            return 10;\\n        }","exchange":"(typedArray, index, value) => {\\n            return 10;\\n        }","isLockFree":"(size) => {\\n            return false;\\n        }","load":"(typedArray, index) => {\\n            return 10;\\n        }","or":"(typedArray, index, value) => {\\n            return 10;\\n        }","store":"(typedArray, index, value) => {\\n            return 10;\\n        }","sub":"(typedArray, index, value) => {\\n            return 10;\\n        }","wait":"(typedArray, index, value, timeout) => {\\n            return \\"not-equal\\";\\n        }","notify":"(typedArray, index, count) => {\\n            return 10;\\n        }","xor":"(typedArray, index, value) => {\\n            return 10;\\n        }"}}"`;

exports[`BuiltIn Tests interface BuiltIn matches snapshot 1`] = `"{"date":{"toLocaleString":"(locales, options) => {\\n                return \\"test string data\\";\\n            }","toLocaleDateString":"(locales, options) => {\\n                return \\"test string data\\";\\n            }","toLocaleTimeString":"(locales, options) => {\\n                return \\"test string data\\";\\n            }"},"set":{"add":"(value) => {\\n                return {};\\n            }","clear":"() => { }","delete":"(value) => {\\n                return false;\\n            }","forEach":"(callbackfn, thisArg) => { }","has":"(value) => {\\n                return false;\\n            }","size":10,"entries":"() => {\\n                return {};\\n            }","keys":"() => {\\n                return {};\\n            }","values":"() => {\\n                return {};\\n            }"},"map":{"clear":"() => { }","delete":"(key) => {\\n                return false;\\n            }","forEach":"(callbackfn, thisArg) => { }","get":"(key) => {\\n                return 10;\\n            }","has":"(key) => {\\n                return false;\\n            }","set":"(key, value) => {\\n                return {};\\n            }","size":10,"entries":"() => {\\n                return {};\\n            }","keys":"() => {\\n                return {};\\n            }","values":"() => {\\n                return {};\\n            }"},"array":[],"object":{"constructor":"() => { }","toString":"() => {\\n                return \\"test string data\\";\\n            }","toLocaleString":"() => {\\n                return \\"test string data\\";\\n            }","valueOf":"() => {\\n                return {};\\n            }","hasOwnProperty":"(v) => {\\n                return false;\\n            }","isPrototypeOf":"(v) => {\\n                return false;\\n            }","propertyIsEnumerable":"(v) => {\\n                return false;\\n            }"},"string":{"localeCompare":"(that, locales, options) => {\\n                return 10;\\n            }"},"number":{"toLocaleString":"(locales, options) => {\\n                return \\"test string data\\";\\n            }"},"boolean":{"valueOf":"() => {\\n                return false;\\n            }"},"symbol":{"toString":"() => {\\n                return \\"test string data\\";\\n            }","valueOf":"() => {\\n                return Symbol();\\n            }"},"function":"() => { }","regexp":{"exec":"(string) => {\\n                return {\\n                    index: 10,\\n                    input: \\"test string data\\",\\n                    0: \\"test string data\\"\\n                };\\n            }","test":"(string) => {\\n                return false;\\n            }","source":"test string data","global":false,"ignoreCase":false,"multiline":false,"lastIndex":10,"compile":"(pattern, flags) => {\\n                return {};\\n            }"},"error":{"name":"test string data","message":"test string data","stack":"test string data"},"promise":"test string data","arrayBuffer":{"byteLength":10,"slice":"(begin, end) => {\\n                return {};\\n            }"},"dataView":{"buffer":{"byteLength":10,"slice":"(begin, end) => {\\n                    return {};\\n                }"},"byteLength":10,"byteOffset":10,"getFloat32":"(byteOffset, littleEndian) => {\\n                return 10;\\n            }","getFloat64":"(byteOffset, littleEndian) => {\\n                return 10;\\n            }","getInt8":"(byteOffset) => {\\n                return 10;\\n            }","getInt16":"(byteOffset, littleEndian) => {\\n                return 10;\\n            }","getInt32":"(byteOffset, littleEndian) => {\\n                return 10;\\n            }","getUint8":"(byteOffset) => {\\n                return 10;\\n            }","getUint16":"(byteOffset, littleEndian) => {\\n                return 10;\\n            }","getUint32":"(byteOffset, littleEndian) => {\\n                return 10;\\n            }","setFloat32":"(byteOffset, value, littleEndian) => { }","setFloat64":"(byteOffset, value, littleEndian) => { }","setInt8":"(byteOffset, value) => { }","setInt16":"(byteOffset, value, littleEndian) => { }","setInt32":"(byteOffset, value, littleEndian) => { }","setUint8":"(byteOffset, value) => { }","setUint16":"(byteOffset, value, littleEndian) => { }","setUint32":"(byteOffset, value, littleEndian) => { }"},"int8Array":{"0":10,"BYTES_PER_ELEMENT":10,"buffer":{"byteLength":10,"slice":"(begin, end) => {\\n                    return {};\\n                }"},"byteLength":10,"byteOffset":10,"copyWithin":"(target, start, end) => {\\n                return {};\\n            }","every":"(predicate, thisArg) => {\\n                return false;\\n            }","fill":"(value, start, end) => {\\n                return {};\\n            }","filter":"(predicate, thisArg) => {\\n                return {};\\n            }","find":"(predicate, thisArg) => {\\n                return 10;\\n            }","findIndex":"(predicate, thisArg) => {\\n                return 10;\\n            }","forEach":"(callbackfn, thisArg) => { }","indexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","join":"(separator) => {\\n                return \\"test string data\\";\\n            }","lastIndexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","length":10,"map":"(callbackfn, thisArg) => {\\n                return {};\\n            }","reduce":"(callbackfn) => {\\n                return 10;\\n            }","reduceRight":"(callbackfn) => {\\n                return 10;\\n            }","reverse":"() => {\\n                return {};\\n            }","set":"(array, offset) => { }","slice":"(start, end) => {\\n                return {};\\n            }","some":"(predicate, thisArg) => {\\n                return false;\\n            }","sort":"(compareFn) => {\\n                return {};\\n            }","subarray":"(begin, end) => {\\n                return {};\\n            }","toLocaleString":"() => {\\n                return \\"test string data\\";\\n            }","toString":"() => {\\n                return \\"test string data\\";\\n            }","valueOf":"() => {\\n                return {};\\n            }"},"uint8Array":{"0":10,"BYTES_PER_ELEMENT":10,"buffer":{"byteLength":10,"slice":"(begin, end) => {\\n                    return {};\\n                }"},"byteLength":10,"byteOffset":10,"copyWithin":"(target, start, end) => {\\n                return {};\\n            }","every":"(predicate, thisArg) => {\\n                return false;\\n            }","fill":"(value, start, end) => {\\n                return {};\\n            }","filter":"(predicate, thisArg) => {\\n                return {};\\n            }","find":"(predicate, thisArg) => {\\n                return 10;\\n            }","findIndex":"(predicate, thisArg) => {\\n                return 10;\\n            }","forEach":"(callbackfn, thisArg) => { }","indexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","join":"(separator) => {\\n                return \\"test string data\\";\\n            }","lastIndexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","length":10,"map":"(callbackfn, thisArg) => {\\n                return {};\\n            }","reduce":"(callbackfn) => {\\n                return 10;\\n            }","reduceRight":"(callbackfn) => {\\n                return 10;\\n            }","reverse":"() => {\\n                return {};\\n            }","set":"(array, offset) => { }","slice":"(start, end) => {\\n                return {};\\n            }","some":"(predicate, thisArg) => {\\n                return false;\\n            }","sort":"(compareFn) => {\\n                return {};\\n            }","subarray":"(begin, end) => {\\n                return {};\\n            }","toLocaleString":"() => {\\n                return \\"test string data\\";\\n            }","toString":"() => {\\n                return \\"test string data\\";\\n            }","valueOf":"() => {\\n                return {};\\n            }"},"uint8ClampedArray":{"0":10,"BYTES_PER_ELEMENT":10,"buffer":{"byteLength":10,"slice":"(begin, end) => {\\n                    return {};\\n                }"},"byteLength":10,"byteOffset":10,"copyWithin":"(target, start, end) => {\\n                return {};\\n            }","every":"(predicate, thisArg) => {\\n                return false;\\n            }","fill":"(value, start, end) => {\\n                return {};\\n            }","filter":"(predicate, thisArg) => {\\n                return {};\\n            }","find":"(predicate, thisArg) => {\\n                return 10;\\n            }","findIndex":"(predicate, thisArg) => {\\n                return 10;\\n            }","forEach":"(callbackfn, thisArg) => { }","indexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","join":"(separator) => {\\n                return \\"test string data\\";\\n            }","lastIndexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","length":10,"map":"(callbackfn, thisArg) => {\\n                return {};\\n            }","reduce":"(callbackfn) => {\\n                return 10;\\n            }","reduceRight":"(callbackfn) => {\\n                return 10;\\n            }","reverse":"() => {\\n                return {};\\n            }","set":"(array, offset) => { }","slice":"(start, end) => {\\n                return {};\\n            }","some":"(predicate, thisArg) => {\\n                return false;\\n            }","sort":"(compareFn) => {\\n                return {};\\n            }","subarray":"(begin, end) => {\\n                return {};\\n            }","toLocaleString":"() => {\\n                return \\"test string data\\";\\n            }","toString":"() => {\\n                return \\"test string data\\";\\n            }","valueOf":"() => {\\n                return {};\\n            }"},"int16Array":{"0":10,"BYTES_PER_ELEMENT":10,"buffer":{"byteLength":10,"slice":"(begin, end) => {\\n                    return {};\\n                }"},"byteLength":10,"byteOffset":10,"copyWithin":"(target, start, end) => {\\n                return {};\\n            }","every":"(predicate, thisArg) => {\\n                return false;\\n            }","fill":"(value, start, end) => {\\n                return {};\\n            }","filter":"(predicate, thisArg) => {\\n                return {};\\n            }","find":"(predicate, thisArg) => {\\n                return 10;\\n            }","findIndex":"(predicate, thisArg) => {\\n                return 10;\\n            }","forEach":"(callbackfn, thisArg) => { }","indexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","join":"(separator) => {\\n                return \\"test string data\\";\\n            }","lastIndexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","length":10,"map":"(callbackfn, thisArg) => {\\n                return {};\\n            }","reduce":"(callbackfn) => {\\n                return 10;\\n            }","reduceRight":"(callbackfn) => {\\n                return 10;\\n            }","reverse":"() => {\\n                return {};\\n            }","set":"(array, offset) => { }","slice":"(start, end) => {\\n                return {};\\n            }","some":"(predicate, thisArg) => {\\n                return false;\\n            }","sort":"(compareFn) => {\\n                return {};\\n            }","subarray":"(begin, end) => {\\n                return {};\\n            }","toLocaleString":"() => {\\n                return \\"test string data\\";\\n            }","toString":"() => {\\n                return \\"test string data\\";\\n            }","valueOf":"() => {\\n                return {};\\n            }"},"uint16Array":{"0":10,"BYTES_PER_ELEMENT":10,"buffer":{"byteLength":10,"slice":"(begin, end) => {\\n                    return {};\\n                }"},"byteLength":10,"byteOffset":10,"copyWithin":"(target, start, end) => {\\n                return {};\\n            }","every":"(predicate, thisArg) => {\\n                return false;\\n            }","fill":"(value, start, end) => {\\n                return {};\\n            }","filter":"(predicate, thisArg) => {\\n                return {};\\n            }","find":"(predicate, thisArg) => {\\n                return 10;\\n            }","findIndex":"(predicate, thisArg) => {\\n                return 10;\\n            }","forEach":"(callbackfn, thisArg) => { }","indexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","join":"(separator) => {\\n                return \\"test string data\\";\\n            }","lastIndexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","length":10,"map":"(callbackfn, thisArg) => {\\n                return {};\\n            }","reduce":"(callbackfn) => {\\n                return 10;\\n            }","reduceRight":"(callbackfn) => {\\n                return 10;\\n            }","reverse":"() => {\\n                return {};\\n            }","set":"(array, offset) => { }","slice":"(start, end) => {\\n                return {};\\n            }","some":"(predicate, thisArg) => {\\n                return false;\\n            }","sort":"(compareFn) => {\\n                return {};\\n            }","subarray":"(begin, end) => {\\n                return {};\\n            }","toLocaleString":"() => {\\n                return \\"test string data\\";\\n            }","toString":"() => {\\n                return \\"test string data\\";\\n            }","valueOf":"() => {\\n                return {};\\n            }"},"int32Array":{"0":10,"BYTES_PER_ELEMENT":10,"buffer":{"byteLength":10,"slice":"(begin, end) => {\\n                    return {};\\n                }"},"byteLength":10,"byteOffset":10,"copyWithin":"(target, start, end) => {\\n                return {};\\n            }","every":"(predicate, thisArg) => {\\n                return false;\\n            }","fill":"(value, start, end) => {\\n                return {};\\n            }","filter":"(predicate, thisArg) => {\\n                return {};\\n            }","find":"(predicate, thisArg) => {\\n                return 10;\\n            }","findIndex":"(predicate, thisArg) => {\\n                return 10;\\n            }","forEach":"(callbackfn, thisArg) => { }","indexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","join":"(separator) => {\\n                return \\"test string data\\";\\n            }","lastIndexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","length":10,"map":"(callbackfn, thisArg) => {\\n                return {};\\n            }","reduce":"(callbackfn) => {\\n                return 10;\\n            }","reduceRight":"(callbackfn) => {\\n                return 10;\\n            }","reverse":"() => {\\n                return {};\\n            }","set":"(array, offset) => { }","slice":"(start, end) => {\\n                return {};\\n            }","some":"(predicate, thisArg) => {\\n                return false;\\n            }","sort":"(compareFn) => {\\n                return {};\\n            }","subarray":"(begin, end) => {\\n                return {};\\n            }","toLocaleString":"() => {\\n                return \\"test string data\\";\\n            }","toString":"() => {\\n                return \\"test string data\\";\\n            }","valueOf":"() => {\\n                return {};\\n            }"},"uint32Array":{"0":10,"BYTES_PER_ELEMENT":10,"buffer":{"byteLength":10,"slice":"(begin, end) => {\\n                    return {};\\n                }"},"byteLength":10,"byteOffset":10,"copyWithin":"(target, start, end) => {\\n                return {};\\n            }","every":"(predicate, thisArg) => {\\n                return false;\\n            }","fill":"(value, start, end) => {\\n                return {};\\n            }","filter":"(predicate, thisArg) => {\\n                return {};\\n            }","find":"(predicate, thisArg) => {\\n                return 10;\\n            }","findIndex":"(predicate, thisArg) => {\\n                return 10;\\n            }","forEach":"(callbackfn, thisArg) => { }","indexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","join":"(separator) => {\\n                return \\"test string data\\";\\n            }","lastIndexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","length":10,"map":"(callbackfn, thisArg) => {\\n                return {};\\n            }","reduce":"(callbackfn) => {\\n                return 10;\\n            }","reduceRight":"(callbackfn) => {\\n                return 10;\\n            }","reverse":"() => {\\n                return {};\\n            }","set":"(array, offset) => { }","slice":"(start, end) => {\\n                return {};\\n            }","some":"(predicate, thisArg) => {\\n                return false;\\n            }","sort":"(compareFn) => {\\n                return {};\\n            }","subarray":"(begin, end) => {\\n                return {};\\n            }","toLocaleString":"() => {\\n                return \\"test string data\\";\\n            }","toString":"() => {\\n                return \\"test string data\\";\\n            }","valueOf":"() => {\\n                return {};\\n            }"},"float32Array":{"0":10,"BYTES_PER_ELEMENT":10,"buffer":{"byteLength":10,"slice":"(begin, end) => {\\n                    return {};\\n                }"},"byteLength":10,"byteOffset":10,"copyWithin":"(target, start, end) => {\\n                return {};\\n            }","every":"(predicate, thisArg) => {\\n                return false;\\n            }","fill":"(value, start, end) => {\\n                return {};\\n            }","filter":"(predicate, thisArg) => {\\n                return {};\\n            }","find":"(predicate, thisArg) => {\\n                return 10;\\n            }","findIndex":"(predicate, thisArg) => {\\n                return 10;\\n            }","forEach":"(callbackfn, thisArg) => { }","indexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","join":"(separator) => {\\n                return \\"test string data\\";\\n            }","lastIndexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","length":10,"map":"(callbackfn, thisArg) => {\\n                return {};\\n            }","reduce":"(callbackfn) => {\\n                return 10;\\n            }","reduceRight":"(callbackfn) => {\\n                return 10;\\n            }","reverse":"() => {\\n                return {};\\n            }","set":"(array, offset) => { }","slice":"(start, end) => {\\n                return {};\\n            }","some":"(predicate, thisArg) => {\\n                return false;\\n            }","sort":"(compareFn) => {\\n                return {};\\n            }","subarray":"(begin, end) => {\\n                return {};\\n            }","toLocaleString":"() => {\\n                return \\"test string data\\";\\n            }","toString":"() => {\\n                return \\"test string data\\";\\n            }","valueOf":"() => {\\n                return {};\\n            }"},"float64Array":{"0":10,"BYTES_PER_ELEMENT":10,"buffer":{"byteLength":10,"slice":"(begin, end) => {\\n                    return {};\\n                }"},"byteLength":10,"byteOffset":10,"copyWithin":"(target, start, end) => {\\n                return {};\\n            }","every":"(predicate, thisArg) => {\\n                return false;\\n            }","fill":"(value, start, end) => {\\n                return {};\\n            }","filter":"(predicate, thisArg) => {\\n                return {};\\n            }","find":"(predicate, thisArg) => {\\n                return 10;\\n            }","findIndex":"(predicate, thisArg) => {\\n                return 10;\\n            }","forEach":"(callbackfn, thisArg) => { }","indexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","join":"(separator) => {\\n                return \\"test string data\\";\\n            }","lastIndexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","length":10,"map":"(callbackfn, thisArg) => {\\n                return {};\\n            }","reduce":"(callbackfn) => {\\n                return 10;\\n            }","reduceRight":"(callbackfn) => {\\n                return 10;\\n            }","reverse":"() => {\\n                return {};\\n            }","set":"(array, offset) => { }","slice":"(start, end) => {\\n                return {};\\n            }","some":"(predicate, thisArg) => {\\n                return false;\\n            }","sort":"(compareFn) => {\\n                return {};\\n            }","subarray":"(begin, end) => {\\n                return {};\\n            }","toLocaleString":"() => {\\n                return \\"test string data\\";\\n            }","toString":"() => {\\n                return \\"test string data\\";\\n            }","valueOf":"() => {\\n                return {};\\n            }"},"bigInt64Array":{"0":"9007199254740991n","BYTES_PER_ELEMENT":10,"buffer":{},"byteLength":10,"byteOffset":10,"copyWithin":"(target, start, end) => {\\n                return {};\\n            }","entries":"() => {\\n                return {};\\n            }","every":"(predicate, thisArg) => {\\n                return false;\\n            }","fill":"(value, start, end) => {\\n                return {};\\n            }","filter":"(predicate, thisArg) => {\\n                return {};\\n            }","find":"(predicate, thisArg) => {\\n                return 9007199254740991n;\\n            }","findIndex":"(predicate, thisArg) => {\\n                return 10;\\n            }","forEach":"(callbackfn, thisArg) => { }","includes":"(searchElement, fromIndex) => {\\n                return false;\\n            }","indexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","join":"(separator) => {\\n                return \\"test string data\\";\\n            }","keys":"() => {\\n                return {};\\n            }","lastIndexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","length":10,"map":"(callbackfn, thisArg) => {\\n                return {};\\n            }","reduce":"(callbackfn) => {\\n                return 9007199254740991n;\\n            }","reduceRight":"(callbackfn) => {\\n                return 9007199254740991n;\\n            }","reverse":"() => {\\n                return {};\\n            }","set":"(array, offset) => { }","slice":"(start, end) => {\\n                return {};\\n            }","some":"(predicate, thisArg) => {\\n                return false;\\n            }","sort":"(compareFn) => {\\n                return {};\\n            }","subarray":"(begin, end) => {\\n                return {};\\n            }","toLocaleString":"() => {\\n                return \\"test string data\\";\\n            }","toString":"() => {\\n                return \\"test string data\\";\\n            }","valueOf":"() => {\\n                return {};\\n            }","values":"() => {\\n                return {};\\n            }","findLast":"(predicate, thisArg) => {\\n                return {};\\n            }","findLastIndex":"(predicate, thisArg) => {\\n                return 10;\\n            }","toReversed":"() => {\\n                return {};\\n            }","toSorted":"(compareFn) => {\\n                return {};\\n            }","with":"(index, value) => {\\n                return {};\\n            }"},"bigUint64Array":{"0":"9007199254740991n","BYTES_PER_ELEMENT":10,"buffer":{},"byteLength":10,"byteOffset":10,"copyWithin":"(target, start, end) => {\\n                return {};\\n            }","entries":"() => {\\n                return {};\\n            }","every":"(predicate, thisArg) => {\\n                return false;\\n            }","fill":"(value, start, end) => {\\n                return {};\\n            }","filter":"(predicate, thisArg) => {\\n                return {};\\n            }","find":"(predicate, thisArg) => {\\n                return 9007199254740991n;\\n            }","findIndex":"(predicate, thisArg) => {\\n                return 10;\\n            }","forEach":"(callbackfn, thisArg) => { }","includes":"(searchElement, fromIndex) => {\\n                return false;\\n            }","indexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","join":"(separator) => {\\n                return \\"test string data\\";\\n            }","keys":"() => {\\n                return {};\\n            }","lastIndexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","length":10,"map":"(callbackfn, thisArg) => {\\n                return {};\\n            }","reduce":"(callbackfn) => {\\n                return 9007199254740991n;\\n            }","reduceRight":"(callbackfn) => {\\n                return 9007199254740991n;\\n            }","reverse":"() => {\\n                return {};\\n            }","set":"(array, offset) => { }","slice":"(start, end) => {\\n                return {};\\n            }","some":"(predicate, thisArg) => {\\n                return false;\\n            }","sort":"(compareFn) => {\\n                return {};\\n            }","subarray":"(begin, end) => {\\n                return {};\\n            }","toLocaleString":"() => {\\n                return \\"test string data\\";\\n            }","toString":"() => {\\n                return \\"test string data\\";\\n            }","valueOf":"() => {\\n                return {};\\n            }","values":"() => {\\n                return {};\\n            }","findLast":"(predicate, thisArg) => {\\n                return {};\\n            }","findLastIndex":"(predicate, thisArg) => {\\n                return 10;\\n            }","toReversed":"() => {\\n                return {};\\n            }","toSorted":"(compareFn) => {\\n                return {};\\n            }","with":"(index, value) => {\\n                return {};\\n            }"},"mapIterator":{},"setIterator":{},"arrayIterator":{},"stringIterator":{},"sharedArrayBuffer":{"byteLength":10,"slice":"(begin, end) => {\\n                return {};\\n            }"},"atomics":{"waitAsync":"(typedArray, index, value, timeout) => {\\n                return {\\n                    async: false,\\n                    value: \\"not-equal\\"\\n                };\\n            }","add":"(typedArray, index, value) => {\\n                return 10;\\n            }","and":"(typedArray, index, value) => {\\n                return 10;\\n            }","compareExchange":"(typedArray, index, expectedValue, replacementValue) => {\\n                return 10;\\n            }","exchange":"(typedArray, index, value) => {\\n                return 10;\\n            }","isLockFree":"(size) => {\\n                return false;\\n            }","load":"(typedArray, index) => {\\n                return 10;\\n            }","or":"(typedArray, index, value) => {\\n                return 10;\\n            }","store":"(typedArray, index, value) => {\\n                return 10;\\n            }","sub":"(typedArray, index, value) => {\\n                return 10;\\n            }","wait":"(typedArray, index, value, timeout) => {\\n                return \\"not-equal\\";\\n            }","notify":"(typedArray, index, count) => {\\n                return 10;\\n            }","xor":"(typedArray, index, value) => {\\n                return 10;\\n            }"}}"`;

exports[`BuiltIn Tests type alias BuiltIn matches snapshot 1`] = `"{"date":{"toLocaleString":"(locales, options) => {\\n                return \\"test string data\\";\\n            }","toLocaleDateString":"(locales, options) => {\\n                return \\"test string data\\";\\n            }","toLocaleTimeString":"(locales, options) => {\\n                return \\"test string data\\";\\n            }"},"set":{"add":"(value) => {\\n                return {};\\n            }","clear":"() => { }","delete":"(value) => {\\n                return false;\\n            }","forEach":"(callbackfn, thisArg) => { }","has":"(value) => {\\n                return false;\\n            }","size":10,"entries":"() => {\\n                return {};\\n            }","keys":"() => {\\n                return {};\\n            }","values":"() => {\\n                return {};\\n            }"},"map":{"clear":"() => { }","delete":"(key) => {\\n                return false;\\n            }","forEach":"(callbackfn, thisArg) => { }","get":"(key) => {\\n                return 10;\\n            }","has":"(key) => {\\n                return false;\\n            }","set":"(key, value) => {\\n                return {};\\n            }","size":10,"entries":"() => {\\n                return {};\\n            }","keys":"() => {\\n                return {};\\n            }","values":"() => {\\n                return {};\\n            }"},"array":[],"object":{"constructor":"() => { }","toString":"() => {\\n                return \\"test string data\\";\\n            }","toLocaleString":"() => {\\n                return \\"test string data\\";\\n            }","valueOf":"() => {\\n                return {};\\n            }","hasOwnProperty":"(v) => {\\n                return false;\\n            }","isPrototypeOf":"(v) => {\\n                return false;\\n            }","propertyIsEnumerable":"(v) => {\\n                return false;\\n            }"},"string":{"localeCompare":"(that, locales, options) => {\\n                return 10;\\n            }"},"number":{"toLocaleString":"(locales, options) => {\\n                return \\"test string data\\";\\n            }"},"boolean":{"valueOf":"() => {\\n                return false;\\n            }"},"symbol":{"toString":"() => {\\n                return \\"test string data\\";\\n            }","valueOf":"() => {\\n                return Symbol();\\n            }"},"function":"() => { }","regexp":{"exec":"(string) => {\\n                return {\\n                    index: 10,\\n                    input: \\"test string data\\",\\n                    0: \\"test string data\\"\\n                };\\n            }","test":"(string) => {\\n                return false;\\n            }","source":"test string data","global":false,"ignoreCase":false,"multiline":false,"lastIndex":10,"compile":"(pattern, flags) => {\\n                return {};\\n            }"},"error":{"name":"test string data","message":"test string data","stack":"test string data"},"promise":"test string data","arrayBuffer":{"byteLength":10,"slice":"(begin, end) => {\\n                return {};\\n            }"},"dataView":{"buffer":{"byteLength":10,"slice":"(begin, end) => {\\n                    return {};\\n                }"},"byteLength":10,"byteOffset":10,"getFloat32":"(byteOffset, littleEndian) => {\\n                return 10;\\n            }","getFloat64":"(byteOffset, littleEndian) => {\\n                return 10;\\n            }","getInt8":"(byteOffset) => {\\n                return 10;\\n            }","getInt16":"(byteOffset, littleEndian) => {\\n                return 10;\\n            }","getInt32":"(byteOffset, littleEndian) => {\\n                return 10;\\n            }","getUint8":"(byteOffset) => {\\n                return 10;\\n            }","getUint16":"(byteOffset, littleEndian) => {\\n                return 10;\\n            }","getUint32":"(byteOffset, littleEndian) => {\\n                return 10;\\n            }","setFloat32":"(byteOffset, value, littleEndian) => { }","setFloat64":"(byteOffset, value, littleEndian) => { }","setInt8":"(byteOffset, value) => { }","setInt16":"(byteOffset, value, littleEndian) => { }","setInt32":"(byteOffset, value, littleEndian) => { }","setUint8":"(byteOffset, value) => { }","setUint16":"(byteOffset, value, littleEndian) => { }","setUint32":"(byteOffset, value, littleEndian) => { }"},"int8Array":{"0":10,"BYTES_PER_ELEMENT":10,"buffer":{"byteLength":10,"slice":"(begin, end) => {\\n                    return {};\\n                }"},"byteLength":10,"byteOffset":10,"copyWithin":"(target, start, end) => {\\n                return {};\\n            }","every":"(predicate, thisArg) => {\\n                return false;\\n            }","fill":"(value, start, end) => {\\n                return {};\\n            }","filter":"(predicate, thisArg) => {\\n                return {};\\n            }","find":"(predicate, thisArg) => {\\n                return 10;\\n            }","findIndex":"(predicate, thisArg) => {\\n                return 10;\\n            }","forEach":"(callbackfn, thisArg) => { }","indexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","join":"(separator) => {\\n                return \\"test string data\\";\\n            }","lastIndexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","length":10,"map":"(callbackfn, thisArg) => {\\n                return {};\\n            }","reduce":"(callbackfn) => {\\n                return 10;\\n            }","reduceRight":"(callbackfn) => {\\n                return 10;\\n            }","reverse":"() => {\\n                return {};\\n            }","set":"(array, offset) => { }","slice":"(start, end) => {\\n                return {};\\n            }","some":"(predicate, thisArg) => {\\n                return false;\\n            }","sort":"(compareFn) => {\\n                return {};\\n            }","subarray":"(begin, end) => {\\n                return {};\\n            }","toLocaleString":"() => {\\n                return \\"test string data\\";\\n            }","toString":"() => {\\n                return \\"test string data\\";\\n            }","valueOf":"() => {\\n                return {};\\n            }"},"uint8Array":{"0":10,"BYTES_PER_ELEMENT":10,"buffer":{"byteLength":10,"slice":"(begin, end) => {\\n                    return {};\\n                }"},"byteLength":10,"byteOffset":10,"copyWithin":"(target, start, end) => {\\n                return {};\\n            }","every":"(predicate, thisArg) => {\\n                return false;\\n            }","fill":"(value, start, end) => {\\n                return {};\\n            }","filter":"(predicate, thisArg) => {\\n                return {};\\n            }","find":"(predicate, thisArg) => {\\n                return 10;\\n            }","findIndex":"(predicate, thisArg) => {\\n                return 10;\\n            }","forEach":"(callbackfn, thisArg) => { }","indexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","join":"(separator) => {\\n                return \\"test string data\\";\\n            }","lastIndexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","length":10,"map":"(callbackfn, thisArg) => {\\n                return {};\\n            }","reduce":"(callbackfn) => {\\n                return 10;\\n            }","reduceRight":"(callbackfn) => {\\n                return 10;\\n            }","reverse":"() => {\\n                return {};\\n            }","set":"(array, offset) => { }","slice":"(start, end) => {\\n                return {};\\n            }","some":"(predicate, thisArg) => {\\n                return false;\\n            }","sort":"(compareFn) => {\\n                return {};\\n            }","subarray":"(begin, end) => {\\n                return {};\\n            }","toLocaleString":"() => {\\n                return \\"test string data\\";\\n            }","toString":"() => {\\n                return \\"test string data\\";\\n            }","valueOf":"() => {\\n                return {};\\n            }"},"uint8ClampedArray":{"0":10,"BYTES_PER_ELEMENT":10,"buffer":{"byteLength":10,"slice":"(begin, end) => {\\n                    return {};\\n                }"},"byteLength":10,"byteOffset":10,"copyWithin":"(target, start, end) => {\\n                return {};\\n            }","every":"(predicate, thisArg) => {\\n                return false;\\n            }","fill":"(value, start, end) => {\\n                return {};\\n            }","filter":"(predicate, thisArg) => {\\n                return {};\\n            }","find":"(predicate, thisArg) => {\\n                return 10;\\n            }","findIndex":"(predicate, thisArg) => {\\n                return 10;\\n            }","forEach":"(callbackfn, thisArg) => { }","indexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","join":"(separator) => {\\n                return \\"test string data\\";\\n            }","lastIndexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","length":10,"map":"(callbackfn, thisArg) => {\\n                return {};\\n            }","reduce":"(callbackfn) => {\\n                return 10;\\n            }","reduceRight":"(callbackfn) => {\\n                return 10;\\n            }","reverse":"() => {\\n                return {};\\n            }","set":"(array, offset) => { }","slice":"(start, end) => {\\n                return {};\\n            }","some":"(predicate, thisArg) => {\\n                return false;\\n            }","sort":"(compareFn) => {\\n                return {};\\n            }","subarray":"(begin, end) => {\\n                return {};\\n            }","toLocaleString":"() => {\\n                return \\"test string data\\";\\n            }","toString":"() => {\\n                return \\"test string data\\";\\n            }","valueOf":"() => {\\n                return {};\\n            }"},"int16Array":{"0":10,"BYTES_PER_ELEMENT":10,"buffer":{"byteLength":10,"slice":"(begin, end) => {\\n                    return {};\\n                }"},"byteLength":10,"byteOffset":10,"copyWithin":"(target, start, end) => {\\n                return {};\\n            }","every":"(predicate, thisArg) => {\\n                return false;\\n            }","fill":"(value, start, end) => {\\n                return {};\\n            }","filter":"(predicate, thisArg) => {\\n                return {};\\n            }","find":"(predicate, thisArg) => {\\n                return 10;\\n            }","findIndex":"(predicate, thisArg) => {\\n                return 10;\\n            }","forEach":"(callbackfn, thisArg) => { }","indexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","join":"(separator) => {\\n                return \\"test string data\\";\\n            }","lastIndexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","length":10,"map":"(callbackfn, thisArg) => {\\n                return {};\\n            }","reduce":"(callbackfn) => {\\n                return 10;\\n            }","reduceRight":"(callbackfn) => {\\n                return 10;\\n            }","reverse":"() => {\\n                return {};\\n            }","set":"(array, offset) => { }","slice":"(start, end) => {\\n                return {};\\n            }","some":"(predicate, thisArg) => {\\n                return false;\\n            }","sort":"(compareFn) => {\\n                return {};\\n            }","subarray":"(begin, end) => {\\n                return {};\\n            }","toLocaleString":"() => {\\n                return \\"test string data\\";\\n            }","toString":"() => {\\n                return \\"test string data\\";\\n            }","valueOf":"() => {\\n                return {};\\n            }"},"uint16Array":{"0":10,"BYTES_PER_ELEMENT":10,"buffer":{"byteLength":10,"slice":"(begin, end) => {\\n                    return {};\\n                }"},"byteLength":10,"byteOffset":10,"copyWithin":"(target, start, end) => {\\n                return {};\\n            }","every":"(predicate, thisArg) => {\\n                return false;\\n            }","fill":"(value, start, end) => {\\n                return {};\\n            }","filter":"(predicate, thisArg) => {\\n                return {};\\n            }","find":"(predicate, thisArg) => {\\n                return 10;\\n            }","findIndex":"(predicate, thisArg) => {\\n                return 10;\\n            }","forEach":"(callbackfn, thisArg) => { }","indexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","join":"(separator) => {\\n                return \\"test string data\\";\\n            }","lastIndexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","length":10,"map":"(callbackfn, thisArg) => {\\n                return {};\\n            }","reduce":"(callbackfn) => {\\n                return 10;\\n            }","reduceRight":"(callbackfn) => {\\n                return 10;\\n            }","reverse":"() => {\\n                return {};\\n            }","set":"(array, offset) => { }","slice":"(start, end) => {\\n                return {};\\n            }","some":"(predicate, thisArg) => {\\n                return false;\\n            }","sort":"(compareFn) => {\\n                return {};\\n            }","subarray":"(begin, end) => {\\n                return {};\\n            }","toLocaleString":"() => {\\n                return \\"test string data\\";\\n            }","toString":"() => {\\n                return \\"test string data\\";\\n            }","valueOf":"() => {\\n                return {};\\n            }"},"int32Array":{"0":10,"BYTES_PER_ELEMENT":10,"buffer":{"byteLength":10,"slice":"(begin, end) => {\\n                    return {};\\n                }"},"byteLength":10,"byteOffset":10,"copyWithin":"(target, start, end) => {\\n                return {};\\n            }","every":"(predicate, thisArg) => {\\n                return false;\\n            }","fill":"(value, start, end) => {\\n                return {};\\n            }","filter":"(predicate, thisArg) => {\\n                return {};\\n            }","find":"(predicate, thisArg) => {\\n                return 10;\\n            }","findIndex":"(predicate, thisArg) => {\\n                return 10;\\n            }","forEach":"(callbackfn, thisArg) => { }","indexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","join":"(separator) => {\\n                return \\"test string data\\";\\n            }","lastIndexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","length":10,"map":"(callbackfn, thisArg) => {\\n                return {};\\n            }","reduce":"(callbackfn) => {\\n                return 10;\\n            }","reduceRight":"(callbackfn) => {\\n                return 10;\\n            }","reverse":"() => {\\n                return {};\\n            }","set":"(array, offset) => { }","slice":"(start, end) => {\\n                return {};\\n            }","some":"(predicate, thisArg) => {\\n                return false;\\n            }","sort":"(compareFn) => {\\n                return {};\\n            }","subarray":"(begin, end) => {\\n                return {};\\n            }","toLocaleString":"() => {\\n                return \\"test string data\\";\\n            }","toString":"() => {\\n                return \\"test string data\\";\\n            }","valueOf":"() => {\\n                return {};\\n            }"},"uint32Array":{"0":10,"BYTES_PER_ELEMENT":10,"buffer":{"byteLength":10,"slice":"(begin, end) => {\\n                    return {};\\n                }"},"byteLength":10,"byteOffset":10,"copyWithin":"(target, start, end) => {\\n                return {};\\n            }","every":"(predicate, thisArg) => {\\n                return false;\\n            }","fill":"(value, start, end) => {\\n                return {};\\n            }","filter":"(predicate, thisArg) => {\\n                return {};\\n            }","find":"(predicate, thisArg) => {\\n                return 10;\\n            }","findIndex":"(predicate, thisArg) => {\\n                return 10;\\n            }","forEach":"(callbackfn, thisArg) => { }","indexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","join":"(separator) => {\\n                return \\"test string data\\";\\n            }","lastIndexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","length":10,"map":"(callbackfn, thisArg) => {\\n                return {};\\n            }","reduce":"(callbackfn) => {\\n                return 10;\\n            }","reduceRight":"(callbackfn) => {\\n                return 10;\\n            }","reverse":"() => {\\n                return {};\\n            }","set":"(array, offset) => { }","slice":"(start, end) => {\\n                return {};\\n            }","some":"(predicate, thisArg) => {\\n                return false;\\n            }","sort":"(compareFn) => {\\n                return {};\\n            }","subarray":"(begin, end) => {\\n                return {};\\n            }","toLocaleString":"() => {\\n                return \\"test string data\\";\\n            }","toString":"() => {\\n                return \\"test string data\\";\\n            }","valueOf":"() => {\\n                return {};\\n            }"},"float32Array":{"0":10,"BYTES_PER_ELEMENT":10,"buffer":{"byteLength":10,"slice":"(begin, end) => {\\n                    return {};\\n                }"},"byteLength":10,"byteOffset":10,"copyWithin":"(target, start, end) => {\\n                return {};\\n            }","every":"(predicate, thisArg) => {\\n                return false;\\n            }","fill":"(value, start, end) => {\\n                return {};\\n            }","filter":"(predicate, thisArg) => {\\n                return {};\\n            }","find":"(predicate, thisArg) => {\\n                return 10;\\n            }","findIndex":"(predicate, thisArg) => {\\n                return 10;\\n            }","forEach":"(callbackfn, thisArg) => { }","indexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","join":"(separator) => {\\n                return \\"test string data\\";\\n            }","lastIndexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","length":10,"map":"(callbackfn, thisArg) => {\\n                return {};\\n            }","reduce":"(callbackfn) => {\\n                return 10;\\n            }","reduceRight":"(callbackfn) => {\\n                return 10;\\n            }","reverse":"() => {\\n                return {};\\n            }","set":"(array, offset) => { }","slice":"(start, end) => {\\n                return {};\\n            }","some":"(predicate, thisArg) => {\\n                return false;\\n            }","sort":"(compareFn) => {\\n                return {};\\n            }","subarray":"(begin, end) => {\\n                return {};\\n            }","toLocaleString":"() => {\\n                return \\"test string data\\";\\n            }","toString":"() => {\\n                return \\"test string data\\";\\n            }","valueOf":"() => {\\n                return {};\\n            }"},"float64Array":{"0":10,"BYTES_PER_ELEMENT":10,"buffer":{"byteLength":10,"slice":"(begin, end) => {\\n                    return {};\\n                }"},"byteLength":10,"byteOffset":10,"copyWithin":"(target, start, end) => {\\n                return {};\\n            }","every":"(predicate, thisArg) => {\\n                return false;\\n            }","fill":"(value, start, end) => {\\n                return {};\\n            }","filter":"(predicate, thisArg) => {\\n                return {};\\n            }","find":"(predicate, thisArg) => {\\n                return 10;\\n            }","findIndex":"(predicate, thisArg) => {\\n                return 10;\\n            }","forEach":"(callbackfn, thisArg) => { }","indexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","join":"(separator) => {\\n                return \\"test string data\\";\\n            }","lastIndexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","length":10,"map":"(callbackfn, thisArg) => {\\n                return {};\\n            }","reduce":"(callbackfn) => {\\n                return 10;\\n            }","reduceRight":"(callbackfn) => {\\n                return 10;\\n            }","reverse":"() => {\\n                return {};\\n            }","set":"(array, offset) => { }","slice":"(start, end) => {\\n                return {};\\n            }","some":"(predicate, thisArg) => {\\n                return false;\\n            }","sort":"(compareFn) => {\\n                return {};\\n            }","subarray":"(begin, end) => {\\n                return {};\\n            }","toLocaleString":"() => {\\n                return \\"test string data\\";\\n            }","toString":"() => {\\n                return \\"test string data\\";\\n            }","valueOf":"() => {\\n                return {};\\n            }"},"bigInt64Array":{"0":"9007199254740991n","BYTES_PER_ELEMENT":10,"buffer":{},"byteLength":10,"byteOffset":10,"copyWithin":"(target, start, end) => {\\n                return {};\\n            }","entries":"() => {\\n                return {};\\n            }","every":"(predicate, thisArg) => {\\n                return false;\\n            }","fill":"(value, start, end) => {\\n                return {};\\n            }","filter":"(predicate, thisArg) => {\\n                return {};\\n            }","find":"(predicate, thisArg) => {\\n                return 9007199254740991n;\\n            }","findIndex":"(predicate, thisArg) => {\\n                return 10;\\n            }","forEach":"(callbackfn, thisArg) => { }","includes":"(searchElement, fromIndex) => {\\n                return false;\\n            }","indexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","join":"(separator) => {\\n                return \\"test string data\\";\\n            }","keys":"() => {\\n                return {};\\n            }","lastIndexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","length":10,"map":"(callbackfn, thisArg) => {\\n                return {};\\n            }","reduce":"(callbackfn) => {\\n                return 9007199254740991n;\\n            }","reduceRight":"(callbackfn) => {\\n                return 9007199254740991n;\\n            }","reverse":"() => {\\n                return {};\\n            }","set":"(array, offset) => { }","slice":"(start, end) => {\\n                return {};\\n            }","some":"(predicate, thisArg) => {\\n                return false;\\n            }","sort":"(compareFn) => {\\n                return {};\\n            }","subarray":"(begin, end) => {\\n                return {};\\n            }","toLocaleString":"() => {\\n                return \\"test string data\\";\\n            }","toString":"() => {\\n                return \\"test string data\\";\\n            }","valueOf":"() => {\\n                return {};\\n            }","values":"() => {\\n                return {};\\n            }","findLast":"(predicate, thisArg) => {\\n                return {};\\n            }","findLastIndex":"(predicate, thisArg) => {\\n                return 10;\\n            }","toReversed":"() => {\\n                return {};\\n            }","toSorted":"(compareFn) => {\\n                return {};\\n            }","with":"(index, value) => {\\n                return {};\\n            }"},"bigUint64Array":{"0":"9007199254740991n","BYTES_PER_ELEMENT":10,"buffer":{},"byteLength":10,"byteOffset":10,"copyWithin":"(target, start, end) => {\\n                return {};\\n            }","entries":"() => {\\n                return {};\\n            }","every":"(predicate, thisArg) => {\\n                return false;\\n            }","fill":"(value, start, end) => {\\n                return {};\\n            }","filter":"(predicate, thisArg) => {\\n                return {};\\n            }","find":"(predicate, thisArg) => {\\n                return 9007199254740991n;\\n            }","findIndex":"(predicate, thisArg) => {\\n                return 10;\\n            }","forEach":"(callbackfn, thisArg) => { }","includes":"(searchElement, fromIndex) => {\\n                return false;\\n            }","indexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","join":"(separator) => {\\n                return \\"test string data\\";\\n            }","keys":"() => {\\n                return {};\\n            }","lastIndexOf":"(searchElement, fromIndex) => {\\n                return 10;\\n            }","length":10,"map":"(callbackfn, thisArg) => {\\n                return {};\\n            }","reduce":"(callbackfn) => {\\n                return 9007199254740991n;\\n            }","reduceRight":"(callbackfn) => {\\n                return 9007199254740991n;\\n            }","reverse":"() => {\\n                return {};\\n            }","set":"(array, offset) => { }","slice":"(start, end) => {\\n                return {};\\n            }","some":"(predicate, thisArg) => {\\n                return false;\\n            }","sort":"(compareFn) => {\\n                return {};\\n            }","subarray":"(begin, end) => {\\n                return {};\\n            }","toLocaleString":"() => {\\n                return \\"test string data\\";\\n            }","toString":"() => {\\n                return \\"test string data\\";\\n            }","valueOf":"() => {\\n                return {};\\n            }","values":"() => {\\n                return {};\\n            }","findLast":"(predicate, thisArg) => {\\n                return {};\\n            }","findLastIndex":"(predicate, thisArg) => {\\n                return 10;\\n            }","toReversed":"() => {\\n                return {};\\n            }","toSorted":"(compareFn) => {\\n                return {};\\n            }","with":"(index, value) => {\\n                return {};\\n            }"},"mapIterator":{},"setIterator":{},"arrayIterator":{},"stringIterator":{},"sharedArrayBuffer":{"byteLength":10,"slice":"(begin, end) => {\\n                return {};\\n            }"},"atomics":{"waitAsync":"(typedArray, index, value, timeout) => {\\n                return {\\n                    async: false,\\n                    value: \\"not-equal\\"\\n                };\\n            }","add":"(typedArray, index, value) => {\\n                return 10;\\n            }","and":"(typedArray, index, value) => {\\n                return 10;\\n            }","compareExchange":"(typedArray, index, expectedValue, replacementValue) => {\\n                return 10;\\n            }","exchange":"(typedArray, index, value) => {\\n                return 10;\\n            }","isLockFree":"(size) => {\\n                return false;\\n            }","load":"(typedArray, index) => {\\n                return 10;\\n            }","or":"(typedArray, index, value) => {\\n                return 10;\\n            }","store":"(typedArray, index, value) => {\\n                return 10;\\n            }","sub":"(typedArray, index, value) => {\\n                return 10;\\n            }","wait":"(typedArray, index, value, timeout) => {\\n                return \\"not-equal\\";\\n            }","notify":"(typedArray, index, count) => {\\n                return 10;\\n            }","xor":"(typedArray, index, value) => {\\n                return 10;\\n            }"}}"`;
