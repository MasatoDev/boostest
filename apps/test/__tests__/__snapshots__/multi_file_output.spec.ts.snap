// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`boostest multi file 1 output correctly 1`] = `
"export function boostestLiteralAliasType<T>(args?: Partial<T>): T {
	return {
		"stringLiteral": "test string data",
		"numberLiteral": 10,
		"bigintLiteral": 9007199254740991,
		"booleanLiteral": true,
		"nullLiteral": null,
		"undefinedId": undefined,
		"anyLiteral": "any",
		"unknownLiteral": undefined,
		"neverLiteral": null,
		"objectLiteral": {},
		"voidLiteral": null,
		"functionLiteral": () => {},
		"arrayLiteral": [],
		"referenceLiteral": referenceLiteral_RefType_boostestLiteralAliasType<any>(),
		"unionType": "test string data",
		"conditionalType": true,
		"tsLiteralString": "string",
		"tsLiteralNumber": 20,
		"tsBigInt": 10000000000000n,
		"tsLiteralBoolean": true,
		"tsNullLiteral": null,
		"tsObject": {},
		"tsArray": [],
		"symbolLiteral": Symbol(),
		"tsTuple": [
			"test string data",
			10,
			"any",
			tsTuple_RefType_boostestLiteralAliasType<any>(),
			tsTuple_RefTypeInterface_boostestLiteralAliasType<any>()
		],
		"tsNamedTuple": [
			"test string data",
			10,
			tsNamedTuple_RefType_boostestLiteralAliasType<any>(),
			tsNamedTuple_RefTypeInterface_boostestLiteralAliasType<any>()
		],
		"intersectionType": {
			...intersectionType_RefType_boostestLiteralAliasType<any>(),
			...intersectionType_RefTypeInterface_boostestLiteralAliasType<any>(),
			...{
				"name": "test string data",
				"age": 10
			}
		},
		"thisType": {},
		"array": [],
		"partial": {},
		"required": {},
		"readonly": {},
		"pick": {},
		"omit": {},
		"extract": {},
		"exclude": {},
		"nonNullable": {},
		"parameters": {},
		"constructorParameters": {},
		"returnType": {},
		"instanceType": {},
		"promise": {},
		"classType": {},
		"refTypeInterface": refTypeInterface_RefTypeInterface_boostestLiteralAliasType<any>(),
		...args
	} as T;
}

export function referenceLiteral_RefType_boostestLiteralAliasType<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function tsTuple_RefType_boostestLiteralAliasType<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function tsTuple_RefTypeInterface_boostestLiteralAliasType<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function tsNamedTuple_RefType_boostestLiteralAliasType<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function tsNamedTuple_RefTypeInterface_boostestLiteralAliasType<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function intersectionType_RefType_boostestLiteralAliasType<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function intersectionType_RefTypeInterface_boostestLiteralAliasType<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function refTypeInterface_RefTypeInterface_boostestLiteralAliasType<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function boostestLiteralInterfaceType<T>(args?: Partial<T>): T {
	return {
		"stringLiteral": "test string data",
		"numberLiteral": 10,
		"bigintLiteral": 9007199254740991,
		"booleanLiteral": true,
		"nullLiteral": null,
		"undefinedId": undefined,
		"anyLiteral": "any",
		"unknownLiteral": undefined,
		"neverLiteral": null,
		"objectLiteral": {},
		"voidLiteral": null,
		"functionLiteral": () => {},
		"arrayLiteral": [],
		"referenceLiteral": referenceLiteral_RefType_boostestLiteralInterfaceType<any>(),
		"unionType": "test string data",
		"conditionalType": true,
		"tsLiteralString": "string",
		"tsLiteralNumber": 20,
		"tsBigInt": 10000000000000n,
		"tsLiteralBoolean": true,
		"tsNullLiteral": null,
		"tsObject": {},
		"tsArray": [],
		"symbolLiteral": Symbol(),
		"tsTuple": [
			"test string data",
			10,
			"any",
			tsTuple_RefType_boostestLiteralInterfaceType<any>(),
			tsTuple_RefTypeInterface_boostestLiteralInterfaceType<any>()
		],
		"tsNamedTuple": [
			"test string data",
			10,
			tsNamedTuple_RefType_boostestLiteralInterfaceType<any>(),
			tsNamedTuple_RefTypeInterface_boostestLiteralInterfaceType<any>()
		],
		"intersectionType": {
			...intersectionType_RefType_boostestLiteralInterfaceType<any>(),
			...intersectionType_RefTypeInterface_boostestLiteralInterfaceType<any>(),
			...{
				"name": "test string data",
				"age": 10
			}
		},
		"thisType": {},
		"array": [],
		"partial": {},
		"required": {},
		"readonly": {},
		"pick": {},
		"omit": {},
		"extract": {},
		"exclude": {},
		"nonNullable": {},
		"parameters": {},
		"constructorParameters": {},
		"returnType": {},
		"instanceType": {},
		"promise": {},
		"classType": {},
		"refTypeInterface": refTypeInterface_RefTypeInterface_boostestLiteralInterfaceType<any>(),
		...args
	} as T;
}

export function referenceLiteral_RefType_boostestLiteralInterfaceType<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function tsTuple_RefType_boostestLiteralInterfaceType<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function tsTuple_RefTypeInterface_boostestLiteralInterfaceType<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function tsNamedTuple_RefType_boostestLiteralInterfaceType<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function tsNamedTuple_RefTypeInterface_boostestLiteralInterfaceType<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function intersectionType_RefType_boostestLiteralInterfaceType<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function intersectionType_RefTypeInterface_boostestLiteralInterfaceType<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function refTypeInterface_RefTypeInterface_boostestLiteralInterfaceType<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function boostestLiteralTypeClass<T extends abstract new (...args: any) => any>(LiteralTypeClass): T {
	return new LiteralTypeClass("test string data", 10, 9007199254740991, true, null, undefined, "any", undefined, null, {}, null, () => {}, [], referenceLiteral_RefType_boostestLiteralTypeClass<any>(), "test string data", "string", 20, 10000000000000n, true, null, {}, [], Symbol(), [
		"test string data",
		10,
		"any",
		tsTuple_RefType_boostestLiteralTypeClass<any>(),
		tsTuple_RefTypeInterface_boostestLiteralTypeClass<any>(),
		"test string data"
	], [
		"test string data",
		10,
		tsNamedTuple_RefType_boostestLiteralTypeClass<any>(),
		tsNamedTuple_RefTypeInterface_boostestLiteralTypeClass<any>(),
		10
	], {
		...intersectionType_RefType_boostestLiteralTypeClass<any>(),
		...intersectionType_RefTypeInterface_boostestLiteralTypeClass<any>(),
		...{
			"name": "test string data",
			"age": 10
		}
	}, true, {}, [], {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, refTypeInterface_RefTypeInterface_boostestLiteralTypeClass<any>());
}

export function referenceLiteral_RefType_boostestLiteralTypeClass<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function tsTuple_RefType_boostestLiteralTypeClass<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function tsTuple_RefTypeInterface_boostestLiteralTypeClass<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function tsNamedTuple_RefType_boostestLiteralTypeClass<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function tsNamedTuple_RefTypeInterface_boostestLiteralTypeClass<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function intersectionType_RefType_boostestLiteralTypeClass<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function intersectionType_RefTypeInterface_boostestLiteralTypeClass<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function refTypeInterface_RefTypeInterface_boostestLiteralTypeClass<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

"
`;

exports[`boostest multi file 2 output correctly 1`] = `
"export function boostestLiteralAliasType<T>(args?: Partial<T>): T {
	return {
		"stringLiteral": "test string data",
		"numberLiteral": 10,
		"bigintLiteral": 9007199254740991,
		"booleanLiteral": true,
		"nullLiteral": null,
		"undefinedId": undefined,
		"anyLiteral": "any",
		"unknownLiteral": undefined,
		"neverLiteral": null,
		"objectLiteral": {},
		"voidLiteral": null,
		"functionLiteral": () => {},
		"arrayLiteral": [],
		"referenceLiteral": referenceLiteral_RefType_boostestLiteralAliasType<any>(),
		"unionType": "test string data",
		"conditionalType": true,
		"tsLiteralString": "string",
		"tsLiteralNumber": 20,
		"tsBigInt": 10000000000000n,
		"tsLiteralBoolean": true,
		"tsNullLiteral": null,
		"tsObject": {},
		"tsArray": [],
		"symbolLiteral": Symbol(),
		"tsTuple": [
			"test string data",
			10,
			"any",
			tsTuple_RefType_boostestLiteralAliasType<any>(),
			tsTuple_RefTypeInterface_boostestLiteralAliasType<any>()
		],
		"tsNamedTuple": [
			"test string data",
			10,
			tsNamedTuple_RefType_boostestLiteralAliasType<any>(),
			tsNamedTuple_RefTypeInterface_boostestLiteralAliasType<any>()
		],
		"intersectionType": {
			...intersectionType_RefType_boostestLiteralAliasType<any>(),
			...intersectionType_RefTypeInterface_boostestLiteralAliasType<any>(),
			...{
				"name": "test string data",
				"age": 10
			}
		},
		"thisType": {},
		"array": [],
		"partial": {},
		"required": {},
		"readonly": {},
		"pick": {},
		"omit": {},
		"extract": {},
		"exclude": {},
		"nonNullable": {},
		"parameters": {},
		"constructorParameters": {},
		"returnType": {},
		"instanceType": {},
		"promise": {},
		"classType": {},
		"refTypeInterface": refTypeInterface_RefTypeInterface_boostestLiteralAliasType<any>(),
		...args
	} as T;
}

export function referenceLiteral_RefType_boostestLiteralAliasType<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function tsTuple_RefType_boostestLiteralAliasType<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function tsTuple_RefTypeInterface_boostestLiteralAliasType<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function tsNamedTuple_RefType_boostestLiteralAliasType<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function tsNamedTuple_RefTypeInterface_boostestLiteralAliasType<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function intersectionType_RefType_boostestLiteralAliasType<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function intersectionType_RefTypeInterface_boostestLiteralAliasType<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function refTypeInterface_RefTypeInterface_boostestLiteralAliasType<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function boostestLiteralInterfaceType<T>(args?: Partial<T>): T {
	return {
		"stringLiteral": "test string data",
		"numberLiteral": 10,
		"bigintLiteral": 9007199254740991,
		"booleanLiteral": true,
		"nullLiteral": null,
		"undefinedId": undefined,
		"anyLiteral": "any",
		"unknownLiteral": undefined,
		"neverLiteral": null,
		"objectLiteral": {},
		"voidLiteral": null,
		"functionLiteral": () => {},
		"arrayLiteral": [],
		"referenceLiteral": referenceLiteral_RefType_boostestLiteralInterfaceType<any>(),
		"unionType": "test string data",
		"conditionalType": true,
		"tsLiteralString": "string",
		"tsLiteralNumber": 20,
		"tsBigInt": 10000000000000n,
		"tsLiteralBoolean": true,
		"tsNullLiteral": null,
		"tsObject": {},
		"tsArray": [],
		"symbolLiteral": Symbol(),
		"tsTuple": [
			"test string data",
			10,
			"any",
			tsTuple_RefType_boostestLiteralInterfaceType<any>(),
			tsTuple_RefTypeInterface_boostestLiteralInterfaceType<any>()
		],
		"tsNamedTuple": [
			"test string data",
			10,
			tsNamedTuple_RefType_boostestLiteralInterfaceType<any>(),
			tsNamedTuple_RefTypeInterface_boostestLiteralInterfaceType<any>()
		],
		"intersectionType": {
			...intersectionType_RefType_boostestLiteralInterfaceType<any>(),
			...intersectionType_RefTypeInterface_boostestLiteralInterfaceType<any>(),
			...{
				"name": "test string data",
				"age": 10
			}
		},
		"thisType": {},
		"array": [],
		"partial": {},
		"required": {},
		"readonly": {},
		"pick": {},
		"omit": {},
		"extract": {},
		"exclude": {},
		"nonNullable": {},
		"parameters": {},
		"constructorParameters": {},
		"returnType": {},
		"instanceType": {},
		"promise": {},
		"classType": {},
		"refTypeInterface": refTypeInterface_RefTypeInterface_boostestLiteralInterfaceType<any>(),
		...args
	} as T;
}

export function referenceLiteral_RefType_boostestLiteralInterfaceType<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function tsTuple_RefType_boostestLiteralInterfaceType<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function tsTuple_RefTypeInterface_boostestLiteralInterfaceType<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function tsNamedTuple_RefType_boostestLiteralInterfaceType<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function tsNamedTuple_RefTypeInterface_boostestLiteralInterfaceType<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function intersectionType_RefType_boostestLiteralInterfaceType<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function intersectionType_RefTypeInterface_boostestLiteralInterfaceType<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function refTypeInterface_RefTypeInterface_boostestLiteralInterfaceType<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function boostestLiteralTypeClass<T extends abstract new (...args: any) => any>(LiteralTypeClass): T {
	return new LiteralTypeClass("test string data", 10, 9007199254740991, true, null, undefined, "any", undefined, null, {}, null, () => {}, [], referenceLiteral_RefType_boostestLiteralTypeClass<any>(), "test string data", "string", 20, 10000000000000n, true, null, {}, [], Symbol(), [
		"test string data",
		10,
		"any",
		tsTuple_RefType_boostestLiteralTypeClass<any>(),
		tsTuple_RefTypeInterface_boostestLiteralTypeClass<any>(),
		"test string data"
	], [
		"test string data",
		10,
		tsNamedTuple_RefType_boostestLiteralTypeClass<any>(),
		tsNamedTuple_RefTypeInterface_boostestLiteralTypeClass<any>(),
		10
	], {
		...intersectionType_RefType_boostestLiteralTypeClass<any>(),
		...intersectionType_RefTypeInterface_boostestLiteralTypeClass<any>(),
		...{
			"name": "test string data",
			"age": 10
		}
	}, true, {}, [], {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, refTypeInterface_RefTypeInterface_boostestLiteralTypeClass<any>());
}

export function referenceLiteral_RefType_boostestLiteralTypeClass<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function tsTuple_RefType_boostestLiteralTypeClass<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function tsTuple_RefTypeInterface_boostestLiteralTypeClass<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function tsNamedTuple_RefType_boostestLiteralTypeClass<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function tsNamedTuple_RefTypeInterface_boostestLiteralTypeClass<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function intersectionType_RefType_boostestLiteralTypeClass<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function intersectionType_RefTypeInterface_boostestLiteralTypeClass<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

export function refTypeInterface_RefTypeInterface_boostestLiteralTypeClass<T>(args?: Partial<T>): T {
	return {
		"name": "test string data",
		"ver": 10,
		...args
	} as T;
}

"
`;
